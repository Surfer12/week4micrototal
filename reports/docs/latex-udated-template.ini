
\documentclass[11pt]{article}
\usepackage[margin=1in]{geometry} % Adjust margins if needed
\usepackage{amsmath}             % For \text and other math commands
\usepackage{amssymb}
\usepackage[T1]{fontenc}         % Encoding
\usepackage{lmodern}             % Font

\begin{document}

\noindent
\textbf{Hw3a Lab Report Ongoing} \\
\textbf{Author: Ryan Oates} \\[6pt]

\section*{[Notation Key]}

\noindent
\textbf{GateSymbolNotation} = \textit{[List of logic gate symbols used in this design]} \\
\quad e.g., AND ($\land$), OR ($\lor$), NOT ($\lnot$), etc., to represent gate operations in Boolean expressions.

\vspace{1em}

\noindent
\textbf{WireConnectionSymbols} = \textit{[Notation for wires and connections in circuit diagrams]} \\
\quad e.g., lines for connections, a dot for junction, labels/arrows for inputs and outputs.

\vspace{1em}

\noindent
\textbf{LogicLevelsRepresentation} = \textit{[Definition of logic high and low levels]} \\
\quad e.g., use `1` (HIGH/True) and `0` (LOW/False) to denote binary logic levels.

\vspace{1em}

\noindent
\textbf{BooleanExpressionNotation} = \textit{[Format for writing Boolean formulas]} \\
\quad e.g., use `+` for OR, $\cdot$ for AND, overline or `!` for NOT ($A + B$ means $A \lor B$, $AB$ or $A\cdot B$ means $A \land B$, $\lnot A$ means NOT $A$).

\noindent
Note: These notations are used throughout (in the truth table, K-map, expressions, and diagrams). See \textbf{[Glossary]} for definitions of terms and symbols.

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_symbols\_defined}: All necessary gate symbols and wire notations are defined above. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_logic\_levels}: Logic 0/1 representation is clear and used consistently. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_notation\_consistency}: Boolean expression notation is consistent across all sections. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Possible Inputs]}

\noindent
\textbf{InputVariables} = \textit{[List of input variable names]} \\
\quad e.g., A, B, C (representing all independent inputs to the logic circuit).

\vspace{1em}

\noindent
\textbf{InputDomain} = \textit{[All possible values or conditions for each input]} \\
\quad e.g., each input $\in \{0,1\}$ for binary logic (enumerate any constraints or don't-care conditions if applicable).

\noindent
Note: These inputs define the domain for the \textbf{[Truth Table]}.

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_all\_inputs\_listed}: All input variables are identified and named. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_domain\_specified}: The range of input values (e.g., binary 0/1) is specified. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Truth Table]}

\noindent
\textbf{TruthTableInputs} = \textit{[Repeat input variables as column headers]} \\
\textbf{TruthTableOutputs} = \textit{[Output variable names as columns]} \\
\textbf{TruthTableFormat} = \textit{[Notation for table entries]} \\
\quad e.g., 0/1 from \textbf{LogicLevelsRepresentation}.

\vspace{1em}

\noindent
An example for two inputs (A, B) and outputs (Sum, Carry):
\[
\begin{array}{c|c||c|c}
A & B & \text{Sum} & \text{Carry} \\
\hline
0 & 0 & 0 & 1 \\
0 & 1 & 1 & 1 \\
1 & 0 & 1 & 1 \\
1 & 1 & 0 & 0
\end{array}
\]

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_all\_combinations}: Table includes all possible input combos (no missing rows). (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_output\_values}: Output values reflect the intended logic. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_table\_format}: Table is formatted with headers and matches defined logic levels. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[K-Map Reduction]}

\noindent
\textbf{KMapVariables}: \textit{[List the same input variables here]} \\
\textbf{KMapLayout}: \textit{[2x2, 4x4, etc. with Gray code ordering]} \\
\textbf{KMapFilling}: \textit{[Placement of 1s/0s based on the Truth Table]} \\
\textbf{KMapGrouping}: \textit{[Groups of adjacent 1s to simplify expression]} \\
\textbf{KMapSimplificationSteps}: \textit{[Step-by-step Boolean simplification]} \\
\textbf{KMapResultExpression}: \textit{[Final simplified Boolean expression from the K-map]}

\vspace{1em}

\noindent
Example layout:
\[
\begin{array}{c|cc}
   & B=0 & B=1 \\
\hline
A=0 & 1   & 1 \\
A=1 & 1   & 0
\end{array}
\]
Groups might yield $A'B' + A'B + AB'$.

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_grouping\_complete}: All 1-cells are grouped (possibly with powers-of-2). (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_minimal\_expression}: Expression is minimal (no more reduction). (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_expression\_correct}: K-map result matches original Truth Table. (Comment: \_\_\_)

\vspace{1em}
\noindent
\textit{(See also [SOP Reduction] and [Boolean Expression Reduction] to confirm equivalence.)}

%------------------------------------------------

\vspace{1.5em}
\section*{[Gate Operations]}

\noindent
Define the logic gates that implement the K-map result or other derived expression:

\begin{itemize}
  \item \textbf{Gate1} = [Gate type, inputs $\rightarrow$ output]
    \begin{itemize}
      \item e.g., $G1$: AND gate with inputs $A$ and $B$, output $X$ ($X = A \land B$).
    \end{itemize}
  \item \textbf{Gate2} = [Gate type, inputs $\rightarrow$ output]
    \begin{itemize}
      \item e.g., $G2$: NOT gate with input $C$, output $Y$ ($Y = \lnot C$).
    \end{itemize}
  \item \textbf{Gate3} = [Gate type, inputs $\rightarrow$ output]
    \begin{itemize}
      \item e.g., $G3$: OR gate with inputs $X$ and $Y$, output $F$ ($F = X + Y$).
    \end{itemize}
\end{itemize}

\noindent
\textbf{GateOperationNotes}: e.g., timing assumptions, gate delays, referencing \textbf{Notation Key} symbols, etc.

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_gates\_complete}: All parts of the simplified Boolean expression are present. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_output\_consistency}: Gate-level outputs match the expected Truth Table. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_notation\_adherence}: Gate symbols follow \textbf{[Notation Key]}. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_timing\_addressed}: Propagation delay or clocking details are noted if needed. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Circuit Diagram Representation]}

\noindent
\textbf{DiagramIllustration} = \textit{[Insert or describe the circuit diagram (ASCII or figure)]} \\
\quad e.g.,
\[
\begin{array}{l}
A \longrightarrow [\text{NAND1}] \longrightarrow [\text{NAND3}] \longrightarrow [\text{OR}] \longrightarrow \text{Sum} \\
\quad \qquad \downarrow \qquad\quad \\
B \longrightarrow [\text{NAND2}] -\!\!\!-\!\!\!\longrightarrow \dots \\
\quad \ldots \\
\end{array}
\]

\noindent
\textbf{DiagramNotation} = \textit{[Gate shapes, lines, junctions, etc. per the Notation Key]} \\
\textbf{DiagramLabels} = \textit{[Labels for inputs (A,B), outputs (Sum,Carry), and intermediate signals]}

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_diagram\_accuracy}: Matches gate-level design from \textbf{[Gate Operations]}. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_label\_consistency}: All signals in the diagram appear in the text/tables. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_symbol\_standard}: Symbols align with \textbf{[Notation Key]}. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Full Signal Analysis]}

\noindent
Analyze the intermediate signals (nodes) and propagation:

\begin{itemize}
  \item \textbf{NodeEquations}: e.g., $X = A \cdot B$, $Y = \lnot C$, etc.
  \item \textbf{OutputEquation}: e.g., $F = X + Y$ or expanded in terms of inputs.
  \item \textbf{PropagationSteps}: Describe how signals flow from inputs to outputs.
  \item \textbf{TimingAnalysis}: If relevant, note worst-case delay (critical path).
\end{itemize}

\noindent
Example:

\noindent
\texttt{Node1 = $\lnot$(A $\cdot$ B)}, \quad
\texttt{Node2 = $\lnot$(A $\cdot$ B)}, \quad
\texttt{Node3 = $\lnot$(Node1 $\cdot$ Node2)}, \quad
\ldots

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_node\_logic}: Intermediate node equations match the final expression. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_propagation\_correctness}: Tracking signals from input changes yields the correct final outputs. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_timing\_consistency}: Any delay or glitch concerns are addressed. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[SOP Reduction]}

\noindent
\textbf{InitialSOP}: e.g., list of minterms from the Truth Table. \\
\textbf{ReductionSteps}: Show step-by-step Boolean algebra. \\
\textbf{ReducedSOP}: Final minimized Sum-of-Products expression.

\vspace{1em}

\noindent
For example:
\[
F = A\,B\,\lnot C + A\,B\,C \quad \rightarrow \quad F = A\,B(\lnot C + C) \quad\rightarrow\quad F = A\,B.
\]

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_all\_minterms\_used}: No missing or extra minterms. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_algebraic\_steps}: Each reduction step is valid. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_sop\_matches\_kmap}: The final SOP equals the K-map simplified expression. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Boolean Expression Reduction]}

\noindent
\textbf{InitialExpression} = [Full unsimplified or starting expression] \\
\textbf{TargetExpression} = [Intended simplified expression] \\
\textbf{ReductionTechnique} = [Method: algebraic, De Morgan's, consensus, etc.] \\
\textbf{ReductionProof} = [Verification that initial = final (truth table or symbolic)] \\
\textbf{FinalBooleanExpression} = [Form actually used in design]

\vspace{1em}

\noindent
\textbf{Verification:} \\
\(\checkmark\)/\(\times\)~\texttt{verify\_equivalence\_proven}: Confirm the simplified expression is functionally identical. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_expression\_minimal}: No further reduction possible. (Comment: \_\_\_) \\
\(\checkmark\)/\(\times\)~\texttt{verify\_consistency\_final}: Matches the implemented circuit and \textbf{[Truth Table]}. (Comment: \_\_\_)

%------------------------------------------------

\vspace{1.5em}
\section*{[Direct Links]}

\noindent
\begin{itemize}
  \item \textbf{NotationKey\_related}: Used by all sections for consistent symbols.
  \item \textbf{PossibleInputs\_related}: Feeds \textbf{Truth Table}.
  \item \textbf{TruthTable\_related}: Basis for \textbf{K-Map Reduction} and \textbf{SOP Reduction}.
  \item \textbf{KMapReduction\_related}: Simplifies the truth table outputs to minimal expression.
  \item \textbf{GateOperations\_related}: Implements the simplified expression with physical gates.
  \item \textbf{CircuitDiagram\_related}: Visual representation of Gate Operations and wiring.
  \item \textbf{FullSignalAnalysis\_related}: Verifies dynamic signal flow.
  \item \textbf{SOPReduction\_related}: Alternative method to match K-map result.
  \item \textbf{BooleanExprReduction\_related}: Final check that everything is equivalent.
  \item \textbf{Glossary\_related}: Definitions of terms and symbols.
\end{itemize}

%------------------------------------------------

\vspace{1.5em}
\section*{[Glossary]}

\noindent
\textbf{AND Gate} = Logic gate that outputs 1 only if \textbf{all} its inputs are 1. (symbol: $\land$) \\
\textbf{OR Gate} = Logic gate that outputs 1 if \textbf{at least one} input is 1. (symbol: $\lor$) \\
\textbf{NOT Gate} = Logic gate that outputs the negation of its input. (symbol: $\lnot$) \\
\textbf{Logic 1 (HIGH)} = True state or high voltage level. \\
\textbf{Logic 0 (LOW)} = False state or low voltage level. \\
\textbf{Truth Table} = A table enumerating all input combinations vs. output. \\
\textbf{Karnaugh Map (K-Map)} = Graphical method for simplifying Boolean expressions. \\
\textbf{Sum-of-Products (SOP)} = Boolean form with OR of AND terms (e.g., $AB + \lnot A\,C$). \\
\textbf{Boolean Expression} = Algebraic form using logic operators. \\
\textbf{Node (Intermediate)} = Output of a gate not the final output (internal signal). \\
\textbf{Propagation Delay} = Time for signal change to travel gate to gate. \\
\textbf{Verification Checklist} = Steps to confirm correctness. \\
\textbf{Cross-Referencing} = Linking related sections or terms in the document. \\
\(\checkmark\) = Successful verification or pass. \\
\(\times\) = Failed verification or requires correction.

%------------------------------------------------

\vspace{1.5em}
\section*{[Simulation and Results]}

\noindent
\textbf{SimulationTool} = e.g., Tina, ModelSim, or Logisim. \\
\textbf{TestDuration} = e.g., 100 ns. \\
\textbf{Stimulus} = e.g., $A: 0\to1$ at 20\,ns; $B: 0\to1$ at 40\,ns.

\vspace{1em}

\noindent
\textbf{WaveformConfiguration}: \textit{Colors, trace widths, background, etc.} \\
\textbf{WaveformAnalysis}: \textit{Tabulate times vs. $A$, $B$, sum, carry, plus commentary.}

\noindent
For instance:
\[
\begin{array}{c|c|c|c|c|l}
\text{Time} & A & B & \text{Sum} & \text{Carry} & \text{Analysis} \\
\hline
0\!-\!20\,\text{ns} & 0 & 0 & 0 & 0 & \text{Initial} \\
20\!-\!40\,\text{ns} & 1 & 0 & 1 & 0 & \text{A transitions} \\
40\!-\!60\,\text{ns} & 1 & 1 & 0 & 1 & \text{B transitions, carry = 1} \\
\vdots & & & & & \\
\end{array}
\]

%------------------------------------------------

\vspace{1.5em}
\section*{[Design History / Iterations]}

\noindent
\textbf{Version} 1: Basic design with potential redundancy \\
\textbf{Version} 2: Removed redundancy \\
\textbf{Version} 3: Corrected carry logic \\
\textbf{Version} 4: Final validated design

%------------------------------------------------

\vspace{1.5em}
\section*{[Verification Checklist]}

\noindent
$\checkmark$~\texttt{truth\_table\_verified} \\
$\checkmark$~\texttt{timing\_requirements\_met} \\
$\checkmark$~\texttt{carry\_generation\_correct} \\
$\checkmark$~\texttt{waveform\_visualization\_optimized}

%------------------------------------------------

\end{document}
